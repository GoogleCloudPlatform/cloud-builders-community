steps:

#
# Get a build number
#
# Cloud build doesn't use incrementing build numbers, by default, but they're often
# useful for Android builds, so these steps will read/increment/store a build number.
#
# Download the config bucket, which stores the build number.
- name: 'gcr.io/cloud-builders/gsutil'
  id: copy_config
  waitFor: ['-']  # The '-' indicates that this step begins immediately.
  # we use rsync and not cp so that this step doesn't fail the first time it's run
  args: ['rsync', 'gs://${_CONFIG_BUCKET}/', '/config']
  volumes:
  - name: 'config'
    path: '/config'

# Compound bash command to:
#   1. read a version
#   2. increment it
#   3. write it back to the version file
#   4. write it to the `build_env` file for use later
- name: 'gcr.io/$PROJECT_ID/tar'
  id: setup_config
  entrypoint: 'bash'
  args: 
  - '-c'
  - |
    cat /config/buildnum | awk '{$1=1+$1;print}' | tee /config/buildnum | awk '{print "BUILD_NUM="$1}'
  waitFor: ['copy_config']
  volumes:
  - name: 'config'
    path: '/config'

# Save the updated build number to cloud storage
- name: 'gcr.io/cloud-builders/gsutil'
  id: save_config
  args: ['cp', '/config/buildnum', 'gs://${_CONFIG_BUCKET}/buildnum']
  waitFor: ['setup_config']
  volumes:
  - name: 'config'
    path: '/config'

#
# Extract the cache
#
# The gradle build cache is stored as a tarball in Google Cloud Storage to
# make builds faster.
#
# After extracting the cache to the /build_cache directory, we need to supply
# that to gradle, and include the volume in steps that require the cache.
#
- name: 'gcr.io/cloud-builders/gsutil'
  id: copy_build_cache
  waitFor: ['-']  # The '-' indicates that this step begins immediately.
  # we use rsync and not cp so that this step doesn't fail the first time it's run
  args: ['rsync', 'gs://${_CACHE_BUCKET}/', '/build_cache']
  volumes:
  - name: 'build_cache'
    path: '/build_cache'

- name: 'gcr.io/$PROJECT_ID/tar'
  id: extract_build_cache
  waitFor: ['copy_build_cache']
  # This might fail the first time, but that's okay
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    tar xpzf /build_cache/cache.tgz -C / || echo "No cache found."
  volumes:
  - name: 'build_cache'
    path: '/build_cache'

#
# Decrypt secret files
#
# Secret files, like keystores and service account files, are stored in the repository
# as encrypted files and decrypted using Google Cloud's Key Management Service.
# https://cloud.google.com/kms/
#
- name: 'gcr.io/cloud-builders/gcloud'
  id: decrypt_secrets
  waitFor: ['-']  # The '-' indicates that this step begins immediately.
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud kms decrypt --ciphertext-file=signing/keystore.properties.enc --plaintext-file=signing/keystore.properties --location=global --keyring=my-app --key=android-builder
    gcloud kms decrypt --ciphertext-file=signing/google-service-account.json.enc --plaintext-file=signing/google-service-account.json --location=global --keyring=my-app --key=android-builder

#
# Build the project
#
# In order to get the build number that we calculated earlier, we need to source the 
# build_environment.sh file *in each step it's needed* before running our build.
#
- name: 'gcr.io/$PROJECT_ID/android:28'
  id: build
  args: ["./gradlew", ":app:assembleRelease", ":app:assembleDebug", "assembleAndroidTest"]
  <<: &env
    env:
    - 'TERM=dumb'
    - 'JAVA_TOOL_OPTIONS="-Xmx4g"'
    - 'GRADLE_USER_HOME=/build_cache/.gradle'
    - 'GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=8 -Dkotlin.incremental=false"'
    - 'BRANCH_NAME=$BRANCH_NAME'
  waitFor: ['decrypt_secrets', 'extract_build_cache']
  volumes:
  - name: 'build_cache'
    path: '/build_cache'

#
# Save the APKs
#
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['-q', 'cp', '-r', 'app/build/outputs/apk', 'gs://${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/']
  waitFor: ['build']

#
# Unit Tests
#
# Run the unit tests using the same type of step as the build.
#
- name: 'gcr.io/$PROJECT_ID/android:28'
  id: unit_tests
  args: ["./gradlew", "check"]
  <<: *env
  waitFor: ['build']
  volumes:
  - name: 'build_cache'
    path: '/build_cache'

#
# Store the unit test reports
#
- name: 'gcr.io/cloud-builders/gsutil'
  id: store_unit_test_reports
  args: ['-q', 'cp', '-r', 'app/build/reports/', 'gs://${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/']
  waitFor: ['unit_tests']

#
# Store the unit test results
#
- name: 'gcr.io/cloud-builders/gsutil'
  id: store_unit_test_results
  args: ['-q', 'cp', '-r', 'app/build/test-results/', 'gs://${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/']
  waitFor: ['unit_tests']

#
# Deployment
#
# Deploy to Google Play if this is the master branch.
#
- name: 'gcr.io/$PROJECT_ID/android:28'
  id: deploy_to_play
  args: ["for_branch", "master", "./gradlew", ":app:publishReleaseApk"]
  <<: *env
  waitFor: ['unit_tests']
  volumes:
  - name: 'build_cache'
    path: '/build_cache'

#
# Deploy to Crashlytics Beta if this is any other branch.
#
- name: 'gcr.io/$PROJECT_ID/android:28'
  id: deploy_to_beta
  args: ["for_branch", "develop", "./gradlew", ":app:crashlyticsUploadDistributionDebug"]
  <<: *env
  waitFor: ['unit_tests']
  volumes:
  - name: 'build_cache'
    path: '/build_cache'

#
# Cleanup
#

# Compress the gradle build cache
- name: 'gcr.io/$PROJECT_ID/tar'
  id: compress_cache
  args: ['cpvzf', '/build_cache/cache.tgz', '-C', '/build_cache', '/build_cache/.gradle']
  waitFor: ['deploy_to_play', 'deploy_to_beta']
  volumes:
  - name: 'build_cache'
    path: '/build_cache'

# Store the build cache
- name: gcr.io/cloud-builders/gsutil
  args: ['cp', '/build_cache/cache.tgz', 'gs://${_CACHE_BUCKET}/cache.tgz']
  waitFor: ['compress_cache']
  volumes:
  - name: 'build_cache'
    path: '/build_cache'

timeout: 1800s

# This build requires more than 3.75 GB of memory, so I have to use a HIGHCPU machine
# which has 30 GB of memory.  This means I can give Gradle lots of processes to run
# highly parallelized.
#
# A standard machine is $0.003 per build minute, but these high cpu machines are
# $0.016 per build minute. That means that a 15 minute build will cost $0.045 on
# a standard machine, but $0.24 on the larger machine.  A machine half that size
# from CircleCI would cost $0.024 per build minute, so that saves 1/3 the cost.
options:
  machineType: 'N1_HIGHCPU_8'
